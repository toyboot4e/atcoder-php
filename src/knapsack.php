<?php

// -------------------------------------------------------------------------------------------------
// テンプレート
// -------------------------------------------------------------------------------------------------

// 標準入力を 1 行読み、単語列に分解する
function words() {
    return explode(' ', trim(fgets(STDIN)));
}

// 標準入力を 1 行読み、整数列に分解する
function ints() {
    return array_map('intval', words());
}

// データ列を空白区切りで標準出力に書き込む
function echo_words(...$args) {
    echo implode(' ', $args), "\n";
}

// -------------------------------------------------------------------------------------------------
// Main
// -------------------------------------------------------------------------------------------------

function main() {
    // 荷物の数と最大の重さを取得する
    // 注: $w は上書きされるため $wMax とする
    list($n, $wMax) = ints();

    // 荷物の情報を取得する
    $ws = [];
    $vs = [];
    for ($i = 0; $i < $n; $i++) {
        list($w, $v) = ints();
        $ws[$i] = $w;
        $vs[$i] = $v;
        // list($ws[], $vs[]) = ints();
    }

    // DP 配列を初期化する
    $dp = array_fill(0, $wMax + 1,  PHP_INT_MIN);
    $dp[0] = 0;
    $next_dp = array_fill(0, $wMax + 1,  PHP_INT_MIN);

    // 荷物を 1 つずつ処理して DP を実施
    for ($i = 0; $i < $n; $i++) {
        // この荷物の情報を取得
        $dw = $ws[$i];
        $dv = $vs[$i];
        // この荷物を収納した場合・しなかった場合の内、
        // より高い価値を各スロットに記録する:
        for ($iw = 0; $iw <= $wMax; $iw++) {
            if ($iw >= $dw) {
                $next_dp[$iw] = max($dp[$iw], $dp[$iw - $dw] + $dv);
            } else {
                $next_dp[$iw] = $dp[$iw];
            }
        }

        [$dp, $next_dp] = [$next_dp, $dp]; // 昔の PHP だと動かない？
    }

    // 解答
    $result = max($dp);
    echo $result;
}

main();
